<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
            http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-2.5.xsd">


	<context:annotation-config />
	<context:component-scan base-package="com.basic.CodeEvaluator"></context:component-scan>
	
	<bean id="ruleGenerator" class="com.basic.CodeEvaluator.rules.RuleGenerator">
		<property name="rules">
			<list>
				<value>com.basic.CodeEvaluator.rules.SizeCheckRules</value>
				<value>com.basic.CodeEvaluator.rules.ResultsCompareRule</value>
				
			</list>
		</property>
	</bean>

	<bean id="appProperties"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:database.properties</value>
			</list>
		</property>
	</bean>

	<!-- This is needed if you want to use the @Transactional annotation -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<!-- These properties are replaced by Maven "resources" -->
		<property name="url" value="${database.connection.url}" />
		<property name="driverClassName" value="${database.connection.driverClassName}" />

	</bean>

	<!-- Configure Spring's transaction manager to use a DataSource -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- Configure jOOQ's ConnectionProvider to use Spring's TransactionAwareDataSourceProxy, 
		which can dynamically discover the transaction context -->
	<bean id="transactionAwareDataSource"
		class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
		<constructor-arg ref="dataSource" />
	</bean>

	<bean class="org.jooq.impl.DataSourceConnectionProvider" name="connectionProvider">
		<constructor-arg ref="transactionAwareDataSource" />
	</bean>

	<!-- Configure the DSL object, optionally overriding jOOQ Exceptions with 
		Spring Exceptions -->
	<bean id="dsl" class="org.jooq.impl.DefaultDSLContext">
		<constructor-arg ref="config" />
	</bean>

<!-- 	<bean id="exceptionTranslator" class="org.jooq.example.spring.exception.ExceptionTranslator" /> -->

	<!-- Invoking an internal, package-private constructor for the example Implement 
		your own Configuration for more reliable behaviour -->
	<bean class="org.jooq.impl.DefaultConfiguration" name="config">
		<constructor-arg index="0" ref="connectionProvider" />
		<constructor-arg index="1">
			<null />
		</constructor-arg>
		<constructor-arg index="2">
			<null />
		</constructor-arg>
		<constructor-arg index="3">
<!-- 			<list> -->
<!-- 				<bean class="org.jooq.impl.DefaultExecuteListenerProvider"> -->
<!-- 					<constructor-arg index="0" ref="exceptionTranslator" /> -->
<!-- 				</bean> -->
<!-- 			</list> -->
			<null></null>
		</constructor-arg>
		<constructor-arg index="4">
			<null />
		</constructor-arg>
		<constructor-arg index="5">
			<value type="org.jooq.SQLDialect">SQLITE</value>
		</constructor-arg>
		<constructor-arg index="6">
			<null />
		</constructor-arg>
		<constructor-arg index="7">
			<null />
		</constructor-arg>
	</bean>


</beans>
